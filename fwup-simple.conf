# Firmware configuration file for the Beaglebone Black
#
# This file provides a minimum configuration if you're just interested
# in creating a raw image file that you can copy to an SDCard using dd(1).
# It doesn't support upgrading an image on the BBB.

# Default ROOTFS if not specified
define(ROOTFS, "${PROJECT_ROOT}/buildroot/output/images/rootfs.ext2")

# Image layout
# +------------------------+
# | MBR                    |
# +------------------------+
# | Boot partition (FAT12) |
# | u-boot.img             |
# | uenv.txt               |
# +------------------------+
# | Rootfs (EXT4)          |
# +------------------------+
# | Unused                 |
# +------------------------+
# | Unused                 |
# +------------------------+

# The boot partition contains MLO, u-boot.img, and has
# room for a debug uEnv.txt if desired. (Only about 1 MB)
define(BOOT_PART_OFFSET, 63)
define(BOOT_PART_COUNT, 2016)

# Let the rootfs have room to grow up to 128 MiB (256K 512-byte blocks)
define(ROOTFS_PART_OFFSET, 4096)
define(ROOTFS_PART_COUNT, 262144)

# Firmware metadata
meta-product = "Demo Image for the Beaglebone Black"
meta-description = "This image boots to Linux."
meta-version = "0.1"
meta-platform = "bbb"
meta-architecture = "arm"
meta-author = "Frank Hunleth"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource MLO {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/MLO"
}
file-resource u-boot.img {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/u-boot.img"
}
file-resource uEnv.txt {
    host-path = "${PROJECT_ROOT}/board/bbb/uEnv.txt"
}
file-resource rootfs.ext2 {
    host-path = ${ROOTFS}
}

mbr mbr-a {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0x1 # FAT12
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_PART_OFFSET}
        block-count = ${ROOTFS_PART_COUNT}
        type = 0x83 # Linux
    }
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    # Everything that gets written can be verified on the fly.
    # This speeds things up, since we don't care about detecting
    # errors before data gets written.
    verify-on-the-fly = true

    on-init {
        mbr_write(mbr-a)
        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
    }

    on-resource MLO { fat_write(${BOOT_PART_OFFSET}, "MLO") }
    on-resource u-boot.img { fat_write(${BOOT_PART_OFFSET}, "u-boot.img") }
    on-resource uEnv.txt { fat_write(${BOOT_PART_OFFSET}, "uEnv.txt") }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_PART_OFFSET})
    }

    on-finish {
    }
}
