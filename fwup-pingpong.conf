# Firmware configuration file for the Beaglebone Black
#
# This configuration provides a SDCard/eMMC layout and firmware update
# image that supports ping/pong updates. I.e., there are two partitions
# that contain the application, but only one is in use at a time. When it
# is time to apply a firmware update, the update is written to the unused
# partition. After the write completes successfully, the system is updated
# so that the formerly unused partition is now active.

define(FINALIZE_FW, "/tmp/finalize.fw")

# Default ROOTFS if not specified
define(ROOTFS, "${PROJECT_ROOT}/buildroot/output/images/rootfs.ext2")

# Image layout
# +--------------------------+
# | MBR                      |
# +--------------------------+
# | Boot partition (FAT12)   |
# | u-boot.img               |
# | uenv.txt                 |
# +--------------------------+
# | Rootfs A (EXT4)          |
# +--------------------------+
# | Rootfs B (EXT4)          |
# +--------------------------+
# | Application data (FAT32) |
# +--------------------------+

# The boot partition contains MLO, u-boot.img, and has
# room for a debug uEnv.txt if desired. (Only about 1 MB)
define(BOOT_PART_OFFSET, 63)
define(BOOT_PART_COUNT, 2016)

# Let the rootfs have room to grow up to 128 MiB
define(ROOTFS_A_PART_OFFSET, 4096)
define(ROOTFS_A_PART_COUNT, 262144)
define(ROOTFS_B_PART_OFFSET, 266240)
define(ROOTFS_B_PART_COUNT, 262144)

# Application data partition
# NOTE: Keep the total amount used under 1.78 GiB so that
#       everything fits in a "2 GB" eMMC.
define(APP_DATA_PART_OFFSET, 528384)
define(APP_DATA_PART_COUNT, 3145728)

# Firmware metadata
meta-product = "Ping/pong update demo image for the Beaglebone Black"
meta-description = "This image boots to Linux."
meta-version = "0.1"
meta-platform = "bbb"
meta-architecture = "arm"
meta-author = "Frank Hunleth"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource MLO {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/MLO"
}
file-resource u-boot.img {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/u-boot.img"
}
file-resource uEnv.txt {
    host-path = "${PROJECT_ROOT}/board/bbb/uEnv.txt"
}
file-resource rootfs.ext2 {
    host-path = ${ROOTFS}
}

mbr mbr-a {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0x1 # FAT12
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${APP_DATA_PART_OFFSET}
        block-count = ${APP_DATA_PART_COUNT}
        type = 0x0b # FAT32
    }
}

mbr mbr-b {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0x1 # FAT12
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${APP_DATA_PART_OFFSET}
        block-count = ${APP_DATA_PART_COUNT}
        type = 0x0b # FAT32
    }
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    # Everything that gets written can be verified on the fly.
    # This speeds things up, since we don't care about detecting
    # errors before data gets written.
    verify-on-the-fly = true

    on-init {
        mbr_write(mbr-a)
        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
        fat_mkfs(${APP_DATA_PART_OFFSET}, ${APP_DATA_PART_COUNT})
    }

    on-resource MLO { fat_write(${BOOT_PART_OFFSET}, "MLO") }
    on-resource u-boot.img { fat_write(${BOOT_PART_OFFSET}, "u-boot.img") }
    on-resource uEnv.txt { fat_write(${BOOT_PART_OFFSET}, "uEnv.txt") }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
    }
}

task upgrade.a {
    # This task upgrades the A partition
    require-partition1-offset = ${ROOTFS_B_PART_OFFSET}

    # Since the upgrade won't run until it has been finalized, it's ok
    # to write data as it is read.
    verify-on-the-fly = true

    on-init {
    }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Until this .fw is run, the system will still boot to the old firmware
        fw_create(${FINALIZE_FW})
        # Add an empty file to flag mbr-a to be written
        fw_add_local_file(${FINALIZE_FW}, "write.mbr-a", "/dev/null")
    }

    on-error {
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-partition1-offset = ${ROOTFS_A_PART_OFFSET}

    # Since the upgrade won't run until it has been finalized, it's ok
    # to write data as it is read.
    verify-on-the-fly = true

    on-init {
    }

    on-resource zImage {
    }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
        # Until this .fw is run, the system will still boot to the old firmware
        fw_create(${FINALIZE_FW})
        # Add an empty file to flag mbr-b to be written
        fw_add_local_file(${FINALIZE_FW}, "write.mbr-b", "/dev/null")
    }

    on-error {
    }
}

# This action is intended to be called from ${FINALIZE_FW} after the "upgrade" task
# has been run. It requires the "write.mbr-a" or "write.mbr-b" resources to exist
# and those don't exist until the "upgrade" task makes them.
task on-reboot {
    on-resource write.mbr-a {
        mbr_write(mbr-a)
    }
    on-resource write.mbr-b {
        mbr_write(mbr-b)
    }
}
